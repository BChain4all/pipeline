--- Generated Smart Contract ---

Here's a Solidity smart contract based on the given mortgage note template. This contract is designed to be deployed on the Ethereum blockchain and uses Solidity version greater than 0.8. The contract includes various functionalities such as initializing the mortgage, making payments, handling late fees, and prepayments.

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

contract MortgageNote is ReentrancyGuard, Pausable {
    using SafeERC20 for IERC20;

    // Struct to hold mortgage details
    struct Mortgage {
        uint256 principalAmount;
        uint256 interestRate;
        uint256 monthlyInstallment;
        uint256 lateFee;
        uint256 startDate;
        uint256 termMonths;
        address mortgagor;
        address mortgagee;
        address guarantor;
        bool isActive;
    }

    // Struct to hold payment information
    struct Payment {
        uint256 id;
        uint256 amount;
        uint256 timestamp;
        bool isLate;
    }

    // Contract state variables
    IERC20 public immutable usdtToken;
    Mortgage public mortgageDetails;
    uint256 public constant MONTH = 30 days;
    uint256 public lastPaymentTimestamp;
    uint256 public nextPaymentDue;
    uint256 public totalPaid;
    uint256 public totalLateFees;
    uint256 public prepaymentAmount;
    Payment[] public payments;

    // Events
    event MortgageInitialized(address indexed mortgagor, address indexed mortgagee, address indexed guarantor, uint256 principalAmount, uint256 termMonths);
    event PaymentMade(address indexed payer, uint256 amount, uint256 timestamp, bool isLate);
    event LateFeeApplied(address indexed payer, uint256 lateFee, uint256 timestamp);
    event MortgagePrepaid(address indexed payer, uint256 amount, uint256 timestamp);
    event MortgageTerminated(uint256 timestamp);

    // Modifiers
    modifier onlyMortgagor() {
        require(msg.sender == mortgageDetails.mortgagor, "Only mortgagor can call this function");
        _;
    }

    modifier onlyMortgagee() {
        require(msg.sender == mortgageDetails.mortgagee, "Only mortgagee can call this function");
        _;
    }

    modifier inActiveState() {
        require(mortgageDetails.isActive, "Mortgage is not active");
        _;
    }

    modifier validUSDTAllowance(uint256 expectedAmount) {
        require(usdtToken.allowance(msg.sender, address(this)) >= expectedAmount, "Insufficient USDT allowance");
        _;
    }

    // Constructor
    constructor(
        address _usdtTokenAddress,
        uint256 _principalAmount,
        uint256 _interestRate,
        uint256 _monthlyInstallment,
        uint256 _lateFee,
        uint256 _termMonths,
        address _mortgagor,
        address _mortgagee,
        address _guarantor
    ) {
        require(_usdtTokenAddress != address(0), "Invalid USDT token address");
        usdtToken = IERC20(_usdtTokenAddress);
        mortgageDetails = Mortgage({
            principalAmount: _principalAmount,
            interestRate: _interestRate,
            monthlyInstallment: _monthlyInstallment,
            lateFee: _lateFee,
            startDate: block.timestamp,
            termMonths: _termMonths,
            mortgagor: _mortgagor,
            mortgagee: _mortgagee,
            guarantor: _guarantor,
            isActive: true
        });
        nextPaymentDue = mortgageDetails.startDate + MONTH;
        emit MortgageInitialized(_mortgagor, _mortgagee, _guarantor, _principalAmount, _termMonths);
    }

    // Pay monthly installment
    function payInstallment()
        external
        onlyMortgagor
        inActiveState
        whenNotPaused
        nonReentrant
        validUSDTAllowance(mortgageDetails.monthlyInstallment)
    {
        bool isLate = _isLatePayment();
        uint256 totalDue = mortgageDetails.monthlyInstallment;

        if (isLate) {
            totalDue += mortgageDetails.lateFee;
            totalLateFees += mortgageDetails.lateFee;
            emit LateFeeApplied(msg.sender, mortgageDetails.lateFee, block.timestamp);
        }

        // Transfer USDT from mortgagor to mortgagee
        usdtToken.safeTransferFrom(msg.sender, mortgageDetails.mortgagee, totalDue);

        // Record payment
        payments.push(Payment({
            id: payments.length + 1,
            amount: totalDue,
            timestamp: block.timestamp,
            isLate: isLate
        }));

        totalPaid += mortgageDetails.monthlyInstallment;
        lastPaymentTimestamp = block.timestamp;
        nextPaymentDue = block.timestamp + MONTH;

        emit PaymentMade(msg.sender, totalDue, block.timestamp, isLate);
    }

    // Prepay mortgage
    function prepayMortgage(uint256 _amount)
        external
        onlyMortgagor
        inActiveState
        whenNotPaused
        nonReentrant
        validUSDTAllowance(_amount)
    {
        require(_amount > 0, "Prepayment amount must be greater than 0");

        // Transfer USDT from mortgagor to mortgagee
        usdtToken.safeTransferFrom(msg.sender, mortgageDetails.mortgagee, _amount);

        prepaymentAmount += _amount;
        totalPaid += _amount;

        emit MortgagePrepaid(msg.sender, _amount, block.timestamp);
    }

    // Terminate mortgage
    function terminateMortgage()
        external
        onlyMortgagee
        whenNotPaused
        nonReentrant
    {
        require(totalPaid >= mortgageDetails.principalAmount, "Mortgage not fully paid");

        mortgageDetails.isActive = false;
        emit MortgageTerminated(block.timestamp);
    }

    // Helper function to check if payment is late
    function _isLatePayment() internal view returns (bool) {
        return block.timestamp > nextPaymentDue;
    }

    // Getter functions for general information
    function getMortgageDetails() external view returns (
        uint256 principalAmount,
        uint256 interestRate,
        uint256 monthlyInstallment,
        uint256 lateFee,
        uint256 startDate,
        uint256 termMonths,
        address mortgagor,
        address mortgagee,
        address guarantor,
        bool isActive
    ) {
        return (
            mortgageDetails.principalAmount,
            mortgageDetails.interestRate,
            mortgageDetails.monthlyInstallment,
            mortgageDetails.lateFee,
            mortgageDetails.startDate,
            mortgageDetails.termMonths,
            mortgageDetails.mortgagor,
            mortgageDetails.mortgagee,
            mortgageDetails.guarantor,
            mortgageDetails.isActive
        );
    }

    function getPaymentsCount() external view returns (uint256) {
        return payments.length;
    }

    function getPayment(uint256 index) external view returns (
        uint256 id,
        uint256 amount,
        uint256 timestamp,
        bool isLate
    ) {
        require(index < payments.length, "Index out of bounds");
        Payment memory payment = payments[index];
        return (payment.id, payment.amount, payment.timestamp, payment.isLate);
    }

    function getTotalPaid() external view returns (uint256) {
        return totalPaid;
    }

    function getTotalLateFees() external view returns (uint256) {
        return totalLateFees;
    }

    function getPrepaymentAmount() external view returns (uint256) {
        return prepaymentAmount;
    }

    function getContractBalance() external view returns (uint256) {
        return usdtToken.balanceOf(address(this));
    }

    function getContractAddress() external view returns (address) {
        return address(this);
    }

    function getUSDTTokenAddress() external view returns (address) {
        return address(usdtToken);
    }

    // Emergency functions
    function pause() external onlyMortgagee {
        _pause();
    }

    function unpause() external onlyMortgagee {
        _unpause();
    }

    // Fallback function to reject direct ether transfers
    receive() external payable {
        revert("Direct payments not allowed. Use specific functions.");
    }

    fallback() external payable {
        revert("Function not found");
    }
}
```

### Deployment Instructions

1. **Compile the Contract**: Ensure you have the Solidity compiler version >=0.8.19. You can use tools like Remix IDE, Hardhat, or Truffle to compile the contract.
2. **Deploy the Contract**: Use a deployment script or a tool like Remix IDE to deploy the contract to the Ethereum blockchain. Make sure to provide the necessary constructor parameters, such as the USDT token address, principal amount, interest rate, monthly installment, late fee, term months, mortgagor address, mortgagee address, and guarantor address.
3. **Interact with the Contract**: Once deployed, you can interact with the contract using web3.js, ethers.js, or any other Ethereum client library. Ensure that the mortgagor, mortgagee, and guarantor addresses have the necessary USDT tokens and allowances set up.

### Security Considerations

- **ReentrancyGuard**: The contract uses ReentrancyGuard to prevent reentrancy attacks.
- **Pausable**: The contract includes pausable functionality to allow the mortgagee to pause the contract in case of emergencies.
- **Access Control**: The contract uses modifiers to restrict function access to the mortgagor, mortgagee, and inactive states.
- **USDT Allowance**: The contract checks for sufficient USDT allowance before performing any token transfers.

This contract is ready for deployment and should be thoroughly tested in a test environment before being used in production.

