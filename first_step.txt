The creation of a smart contract from a legal contract of this complexity is a significant endeavour. To do this entirely with code would be challenging due to various ambiguities and discretionary terms. Here are some aspects that could be encoded into a smart contract.

Below is a simplified version in Solidity, focusing on the rent collection aspect:

```solidity
pragma solidity >=0.5.0 <0.7.0;

contract RentalContract {
    address payable public landlord;
    address public tenant;
    uint256 public rent;
    uint256 public securityDeposit;
    uint256 constant lateFee = 200;
    uint256 public startOfLease;
    uint256 public endOfLease;

    constructor(address _tenant, uint256 _rent, uint256 _securityDeposit, uint256 _startOfLease, uint256 _endOfLease) public {
        landlord = msg.sender;
        tenant = _tenant;
        rent = _rent;
        securityDeposit = _securityDeposit;
        startOfLease = _startOfLease;
        endOfLease = _endOfLease;
    }

    function payRent() public payable {
        // Only tenant is allowed to pay.
        require(msg.sender == tenant);
        // Have to pay exact amount of rent.
        require(msg.value == rent);
        // Landlord receives the payment.
        landlord.transfer(msg.value);
    }

    function paySecurityDeposit() public payable {
        // Only tenant is allowed to pay.
        require(msg.sender == tenant);
        // Have to pay exact amount of security deposit.
        require(msg.value == securityDeposit);
        // Landlord receives the security deposit.
        landlord.transfer(msg.value);
    }
}
```

This is a simplified smart contract that handles renting. It doesn't include many elements of your original contract, like appliance provision, furnishings, maintenance and many more. Codifying all these in a smart contract would not make sense. 

For testing the smart contract, you can use Truffle and Ganache. Truffle is a development environment for Ethereum that provides unit testing and deployment capabilities. Ganache is a private Ethereum blockchain you can use for testing.

Guidelines:
- Rent Payment test: Verify if only the tenant can pay the rent, if the rent amount is exact, and if the rent goes to the landlord.
- Security Deposit test: Verify if only the tenant can pay the security deposit, if the security deposit amount is exact, and if it goes to the landlord.

Points of Ambiguity:
- Date validation: Smart contracts cannot access external data including the current date or time. An oracle would therefore be needed.
- Lease Extension/Modification: Handling in-code modification or extension of lease could get tricky.
- Lease Termination: Conditions for lease termination and security deposit refund rules would be complex to enforce on-chain.
- Discretionary decisions: A legal contract often gives the landlord discretionary power like deciding if the tenant can sublet or if a condition of the lease has been violated. Translating these into code would be difficult since code requires unambiguous, deterministic instructions.
- State laws: This contract is subject to Florida state laws, which can't be enforced by smart contracts themselves. Enforcement would require external legal and judicial processes.

The developing field of Decentralized Law (e.g. OpenLaw) tries to bridge the gap between legal agreements and smart contracts, potentially offering better tools for this task in the future. Nonetheless, it's recommended to keep the legal agreement and the code as separate entities, but link them via secure, on-chain hashes to maintain the spirit of blockchain's decentralization and security.